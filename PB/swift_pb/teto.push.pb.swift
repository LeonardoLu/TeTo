// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: teto.push.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TeTo_Type: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case user // = 0
  case game // = 1
  case room // = 2

  init() {
    self = .user
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .user
    case 1: self = .game
    case 2: self = .room
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .user: return 0
    case .game: return 1
    case .room: return 2
    }
  }

}

#if swift(>=4.2)

extension TeTo_Type: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct TeTo_Msg {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roomID: String {
    get {return _roomID ?? String()}
    set {_roomID = newValue}
  }
  /// Returns true if `roomID` has been explicitly set.
  var hasRoomID: Bool {return self._roomID != nil}
  /// Clears the value of `roomID`. Subsequent reads from it will return its default value.
  mutating func clearRoomID() {self._roomID = nil}

  var fromUserID: String {
    get {return _fromUserID ?? String()}
    set {_fromUserID = newValue}
  }
  /// Returns true if `fromUserID` has been explicitly set.
  var hasFromUserID: Bool {return self._fromUserID != nil}
  /// Clears the value of `fromUserID`. Subsequent reads from it will return its default value.
  mutating func clearFromUserID() {self._fromUserID = nil}

  var toUserID: [String] = []

  var type: TeTo_Type {
    get {return _type ?? .user}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var content: Data {
    get {return _content ?? Data()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _roomID: String? = nil
  fileprivate var _fromUserID: String? = nil
  fileprivate var _type: TeTo_Type? = nil
  fileprivate var _content: Data? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension TeTo_Type: @unchecked Sendable {}
extension TeTo_Msg: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TeTo"

extension TeTo_Type: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER"),
    1: .same(proto: "GAME"),
    2: .same(proto: "ROOM"),
  ]
}

extension TeTo_Msg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Msg"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "roomID"),
    2: .same(proto: "fromUserID"),
    3: .same(proto: "toUserID"),
    4: .same(proto: "type"),
    5: .same(proto: "content"),
  ]

  public var isInitialized: Bool {
    if self._roomID == nil {return false}
    if self._fromUserID == nil {return false}
    if self._type == nil {return false}
    if self._content == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._roomID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._fromUserID) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.toUserID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._roomID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fromUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.toUserID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.toUserID, fieldNumber: 3)
    }
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._content {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TeTo_Msg, rhs: TeTo_Msg) -> Bool {
    if lhs._roomID != rhs._roomID {return false}
    if lhs._fromUserID != rhs._fromUserID {return false}
    if lhs.toUserID != rhs.toUserID {return false}
    if lhs._type != rhs._type {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
